#include <algorithm>
#include <cmath>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

using namespace std;

const int N = 4000;

struct Record {
    char name[30];
    short int department;
    char job_title[22];
    char year[10];
};

struct tree {
    Record* data;
    tree* left;
    tree* right;
    int balance;
};

string prompt(const string& str)
{
    cout << str;
    cout << "\n> ";
    string ans;
    cin >> ans;
    return ans;
}

int strcomp(const string& str1, const string& str2, int len = -1)
{
    if (len == -1) {
        len = (int)str1.length();
    }
    for (int i = 0; i < len; ++i) {
        if (str1[i] == '\0' and str2[i] == '\0') {
            return 0;
        } else if (str1[i] == ' ' and str2[i] != ' ') {
            return -1;
        } else if (str1[i] != ' ' and str2[i] == ' ') {
            return 1;
        } else if (str1[i] < str2[i]) {
            return -1;
        } else if (str1[i] > str2[i]) {
            return 1;
        }
    }
    return 0;
}

bool compareByDay(const Record* a, const Record* b)
{
    char *A, *B;
    A = (char*)malloc(2 * sizeof(char));
    B = (char*)malloc(2 * sizeof(char));
    A[0] = a->year[0];
    A[1] = a->year[1];
    B[0] = b->year[0];
    B[1] = b->year[1];
    int day_a = atoi(A);
    int day_b = atoi(B);
    delete A;
    delete B;
    return ((day_a < day_b)
            || ((day_a == day_b) && (strcmp(a->name, b->name) < 0)));
}

// Функция разделения (часть алгоритма быстрой сортировки)
int partition(
        Record* arr[],
        int low,
        int high,
        bool (*compare)(const Record*, const Record*))
{
    Record* pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (compare(arr[j], pivot)) {
            i++;
            swap(arr[i], arr[j]);
        }
    }

    swap(arr[i + 1], arr[high]);
    return i + 1;
}

// Функция быстрой сортировки
void quickSort(
        Record* arr[],
        int low,
        int high,
        bool (*compare)(const Record*, const Record*))
{
    if (low < high) {
        int pi = partition(arr, low, high, compare);

        quickSort(arr, low, pi - 1, compare);
        quickSort(arr, pi + 1, high, compare);
    }
}

void mainSort(Record** masPointers, int numEmployees)
{
    quickSort(masPointers, 0, numEmployees - 1, compareByDay);
}

void print_head()
{
    cout << "Record           Name             D. nom     Job title            "
            "Date\n";
}

void print_record(Record* record, int i)
{
    cout << setw(3) << i << " " << record->name << "  " << setw(4)
         << record->department << "  " << record->job_title << "  "
         << record->year << "\n";
}

void show_list(Record* records[], int n = N)
{
    int ind = 0;
    while (true) {
        system("cls");
        print_head();
        for (int i = 0; i < 20; i++) {
            Record* record = records[ind + i];
            print_record(record, ind + i + 1);
        }
        cout << ind / 20 + 1 << endl;
        string chose = prompt(
                "n: Next page\t"
                "p: Previous page\t"
                "d: Skip 10 next pages\n"
                "a: Skip 10 prev pages\n"
                "g: Select page\n"
                "Any key: Exit");
        switch (chose[0]) {
        case 'n':
            ind += 20;
            break;
        case 'p':
            ind -= 20;
            break;
        case 'd':
            ind += 200;
            break;
        case 'a':
            ind -= 200;
            break;
        case 'g':
            cout << endl << "enter page nom.: ";
            int h;
            cin >> h;
            h--;
            ind = h * 20;
            break;
        default:
            return;
        }
        if (ind < 0) {
            ind = 0;
        } else if (ind > n - 20) {
            ind = n - 20;
        }
    }
}

int quick_search(Record* arr[], const string& key)
{
    int l = 0;
    int r = N - 1;
    while (l < r) {
        int m = (l + r) / 2;
        if (strcomp(&arr[m]->year[0], key, 2) < 0) {
            l = m + 1;
        } else {
            r = m;
        }
    }
    if (strcomp(&arr[r]->year[0], key, 2) == 0) {
        return r;
    }
    return -1;
}

void search(Record* arr[], int& ind, int& n)
{
    string key;
    do {
        key = prompt("Input search key (day)");
    } while (key.length() != 2);
    ind = quick_search(arr, key);
    if (ind == -1) {
        cout << "Not found\n";
    } else {
        int i;
        for (i = ind + 1; strcomp(&arr[i]->year[0], key, 2) == 0; ++i) {
        }
        n = i - ind;
        show_list(&arr[ind], n);
    }
}

void dbd_add(Record* data, tree*& p)
{
    static int vr = 1;
    static int hr = 1;
    if (!p) {
        p = new tree{data, NULL, NULL, 0};
        vr = 1;
    } else if (data->department < p->data->department) {
        dbd_add(data, p->left);
        if (vr == 1) {
            if (p->balance == 0) {
                tree* q = p->left;
                p->left = q->right;
                q->right = p;
                p = q;
                q->balance = 1;
                vr = 0;
                hr = 1;
            } else {
                p->balance = 0;
                vr = 1;
                hr = 0;
            }
        } else {
            hr = 0;
        }
    } else if (data->department >= p->data->department) {
        dbd_add(data, p->right);
        if (vr == 1) {
            p->balance = 1;
            hr = 1;
            vr = 0;
        } else if (hr == 1) {
            if (p->balance == 1) {
                tree* q = p->right;
                p->balance = 0;
                q->balance = 0;
                p->right = q->left;
                q->left = p;
                p = q;
                vr = 1;
                hr = 0;
            } else {
                hr = 0;
            }
        }
    }
}

void Print_tree(tree* p, int& i)
{
    if (p) {
        Print_tree(p->left, i);
        print_record(p->data, i++);
        Print_tree(p->right, i);
    }
}

void search_in_tree(tree* root, int key, int& i)
{
    if (root) {
        if (key < root->data->department) {
            search_in_tree(root->left, key, i);
        } else if (key > root->data->department) {
            search_in_tree(root->right, key, i);
        } else if (key == root->data->department) {
            search_in_tree(root->left, key, i);
            print_record(root->data, i++);
            search_in_tree(root->right, key, i);
        }
    }
}

void rmtree(tree* root)
{
    if (root) {
        rmtree(root->right);
        rmtree(root->left);
        delete root;
    }
}

void Tree(Record* arr[], int n)
{
    tree* root = NULL;
    for (int i = 0; i < n; ++i) {
        dbd_add(arr[i], root);
    }
    print_head();
    int i = 1;
    Print_tree(root, i);
    int key;
    do {
        key = stoi(prompt("Input search key (department), 1000 - exit"));
        print_head();
        i = 1;
        search_in_tree(root, key, i);
    } while (key != 1000);
    rmtree(root);
}

void shannon(const int n, double p[], int Length[], char c[][20])
{
    double* q = new double[n];
    q[0] = 0;
    Length[0] = -floor(log2(p[0]));
    for (int i = 1; i < n; ++i) {
        q[i] = q[i - 1] + p[i - 1];
        Length[i] = -floor(log2(p[i]));
    }
    for (int i = 1; i <= n; ++i) {
        for (int j = 0; j < Length[i - 1]; ++j) {
            q[i - 1] *= 2;
            c[i - 1][j] = floor(q[i - 1]) + '0';
            if (q[i - 1] >= 1) {
                q[i - 1] -= 1;
            }
        }
    }
}

unordered_map<char, int>
get_char_counts_from_file(const string& file_name, int& file_size, int n = N)
{
    ifstream file(file_name, ios::binary);
    if (!file.is_open()) {
        throw runtime_error("Could not open file");
    }
    char ch_arr[sizeof(Record) * n];
    file.read((char*)ch_arr, sizeof(Record) * n);
    file.close();

    unordered_map<char, int> counter_map;
    file_size = 0;
    for (auto ch : ch_arr) {
        counter_map[ch]++;
        file_size++;
    }
    return counter_map;
}

vector<pair<double, char>>
calc_probabilities(const unordered_map<char, int>& counter_map, int count)
{
    vector<pair<double, char>> probabilities;
    probabilities.reserve(counter_map.size());
    for (auto i : counter_map) {
        probabilities.emplace_back(
                make_pair((double)i.second / count, i.first));
    }
    return probabilities;
}

int coding()
{
    int file_size;
    unordered_map<char, int> counter_map;
    try {
        counter_map = get_char_counts_from_file("testBase2.dat", file_size);
    } catch (runtime_error& exc) {
        cout << exc.what();
        return 1;
    }
    auto probabilities = calc_probabilities(counter_map, file_size);
    counter_map.clear();

    sort(probabilities.begin(),
         probabilities.end(),
         greater<pair<double, char>>());

    double ent = 0;

    for (auto i : probabilities) {
        ent += i.first * log2(i.first);
    }

    ent *= -1;

    const int n = (int)probabilities.size();

    auto c = new char[n][20];
    auto Length = new int[n];
    auto p = new double[n];
    for (int i = 0; i < n; ++i) {
        p[i] = probabilities[i].first;
    }

    double shen = 0;
    shannon(n, p, Length, c);
    cout << "\nShannon Code:\n";
    cout << "\n  Length Code\n";
    double temp = 0;
    for (int i = 0; i < n; i++) {
        cout << i + 1 << " ";
        printf("%c | %4.6lf %d ", probabilities[i].second, shen, Length[i]);
        for (int j = 0; j < Length[i]; ++j) {
            printf("%c", c[i][j]);
        }
        cout << '\n';
        shen += p[i];
        temp += p[i] * Length[i];
    }

    double shanAver = temp;
    cout << "Entropy = " << ent << endl;
    cout << "Average word length = " << shanAver << endl;
    cout << "Redundancy = " << shanAver - ent << endl;
    delete[] p;
}

void mainloop(Record* unsorted_ind_array[], Record* sorted_ind_array[])
{
    int search_ind, search_n = -1;
    system("cls");
    while (true) {
        string chose = prompt(
                "1: Show unsorted list\n"
                "2: Show sorted list\n"
                "3: Search\n"
                "4: Tree \n"
                "5: Coding\n"
                "Any key: Exit");
        switch (chose[0]) {
        case '1':
            show_list(unsorted_ind_array);
            break;
        case '2':
            show_list(sorted_ind_array);
            break;
        case '3':
            search(sorted_ind_array, search_ind, search_n);
            break;
        case '4':
            if (search_n == -1) {
                cout << "Please search first\n";
            } else {
                Tree(&sorted_ind_array[search_ind], search_n);
            }
            break;
        case '5':
            coding();
            break;
        default:
            return;
        }
    }
}

int main()
{
    FILE* fp;
    fp = fopen("testBase2.dat", "rb");
	if (!fopen) { 
        cout << "File not found" << endl; 
    }
    Record mas[4000] = {0};
    int i = fread((Record*)mas, sizeof(Record), 4000, fp);

    Record* unsortmasPointers[N];
    for (int i = 0; i < N; i++) {
        unsortmasPointers[i] = &mas[i];
    }

    Record* sortmasPointers[N];
    for (int i = 0; i < N; i++) {
        sortmasPointers[i] = &mas[i];
    }

    mainSort(sortmasPointers, N);

    mainloop(unsortmasPointers, sortmasPointers);
}